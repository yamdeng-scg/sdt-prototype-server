<?xml version="1.0" encoding="UTF-8" ?>
<querys>
	<query id="findByRoomIdAll">
		<![CDATA[
			SELECT
				r.join_message_id,
				m.*,
				IFNULL(s.is_customer, 0) as is_customer,
				(
					SELECT
						CASE WHEN m.id >= r.join_message_id AND r.state != 8 AND m.is_employee = 0 AND r.member_id IS NULL THEN 1 ELSE COUNT(1) END
					FROM
						message_read
					WHERE
						message_id = m.id
						AND read_date IS NULL
				) no_read_count,
				r.name as room_name,
				s.name as speaker_name
			FROM
				v_room r
				INNER JOIN chat_message m ON r.id = m.room_id
				LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
			WHERE
				r.id = :roomId
				AND m.id >= IFNULL(r.join_message_id, 0)
			ORDER BY
				m.id 
		]]>
	</query>
	<query id="findRangeById">
    SELECT m.*,
				(
					CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
				) AS is_customer,
				(
					SELECT
						COUNT(1)
					FROM
						message_read
					WHERE
						room_id = r.id
						AND message_id = m.id
						AND read_date is null
				) no_read_count,
				r.name as room_name,
				s.name as speaker_name
			FROM  room r 
			INNER JOIN chat_message m ON r.id = m.room_id
			LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
			WHERE  r.id = :roomId
        AND m.id BETWEEN :startId AND :endId
	</query>
	<query id="findRangeByIdNotAdminType">
    SELECT * 
			FROM   chat_messaage 
			WHERE  room_id = :roomId
			AND    id BETWEEN :startId AND :endId 
			AND    is_system_message = 0 
			AND    message_admin_type = 0
	</query>
	<query id="findByRoomIdToSpeaker">
		<![CDATA[
			SELECT 
				r.join_message_id, 
				m.*,
				(
					CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
				) AS is_customer,
				(
					SELECT
						CASE WHEN m.id >= r.join_message_id AND r.state != 8 AND m.is_employee = 0 AND r.member_id IS NULL THEN 1 ELSE COUNT(1) END
					FROM
						message_read
					WHERE
						message_id = m.id
						AND read_date IS NULL
				) no_read_count,
				r.name as room_name,
				s.name as speaker_name
			FROM 
				room r 
				INNER JOIN chat_message m ON r.id = m.room_id 
				AND (
					m.create_date > DATE_SUB(NOW(), INTERVAL :intervalDay DAY) 
					OR m.id > (
						SELECT 
							IFNULL(MIN(read_last_message_id), 0) 
						FROM
							room_speaker 
						WHERE 
							room_id = r.id
					)
				) 
				LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
			WHERE 
				r.id = :roomId 
				AND (
					CASE WHEN :startId IS NULL THEN 1 = 1 ELSE m.id < :startId END
				) 
				AND m.message_admin_type <= IFNULL(:messageAdminType, 0) 
			ORDER BY 
				m.id DESC 
			LIMIT 
				:pageSize
		]]>
	</query>
	<query id="findByRoomIdToAdmin">
		<![CDATA[
			SELECT 
				r.join_message_id, 
				m.*,
				(
					CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
				) AS is_customer,
				(
					SELECT
						CASE WHEN m.id >= r.join_message_id AND r.state != 8 AND m.is_employee = 0 AND r.member_id IS NULL THEN 1 ELSE COUNT(1) END
					FROM
						message_read
					WHERE
						message_id = m.id
						AND read_date IS NULL
				) no_read_count,
				r.name as room_name,
				s.name as speaker_name
			FROM 
				room r 
				INNER JOIN chat_message m ON r.id = m.room_id 
				AND m.create_date > DATE_SUB(NOW(), INTERVAL :intervalDay DAY) 
				LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
			WHERE 
				r.id = :roomId 
				AND m.id >= IFNULL(r.join_message_id, 0)
			ORDER BY 
				m.id ASC 
			LIMIT 
				:pageSize
		]]>
	</query>
	<query id="updateMesageNoReadCount">
		<![CDATA[
			UPDATE chat_message 
				SET    not_read_count = not_read_count - 1
				WHERE  room_id = :roomId 
				AND    ( 
											CASE 
														WHEN :startId = :lastId THEN id = :startId 
														ELSE id > :startId
														AND    id <= :lastId 
											END)
		]]>
	</query>
	<query id="updateRoomSpeakerReadLastMesasge">
    UPDATE room_speaker 
			SET    old_last_message_id = read_last_message_id, 
						read_last_message_id = :lastId 
			WHERE  room_id = :roomId 
						AND speaker_id = :speakerId 
	</query>
	<query id="updateMessageRead">
		<![CDATA[
			UPDATE message_read 
				SET    read_date = NOW() 
				WHERE  room_id = :roomId 
							AND speaker_id = :speakerId 
							AND message_id >= :lastId 
		]]>
	</query>
	<query id="create">
    CALL make_message(:companyId, :roomId, :speakerId, :mesasgeType, :isSystemMessage, :message, :messageAdminType, :isEmployee, :messageDetail, :templateId) 
	</query>
	<query id="readMessage">
    CALL read_message(:roomId, :speakerId, :startId, :endId) 
	</query>
	<query id="getReadCountByMessageId">
		SELECT COUNT(id) AS read_count 
			FROM   message_read 
			WHERE  message_id = :id
				AND read_date IS NOT NULL 
	</query>
	<query id="delete">
    DELETE 
      FROM chat_message
    WHERE id = :id
	</query>
	<query id="deleteApplyValue">
    UDPATE chat_message
      SET is_delete = 1
    WHERE id = :id
	</query>
	<query id="deleteMessageRead">
    DELETE 
      FROM message_read
    WHERE message_id = :id
	</query>
	<query id="getDetail">
		SELECT
			m.*,
			(
				CASE WHEN m.is_employee = 1 THEN 0 ELSE 1 END
			) AS is_customer,
			(
				SELECT
					COUNT(1)
				FROM
					message_read
				WHERE
					room_id = r.id
					AND message_id = m.id
					AND read_date IS NULL
			) no_read_count,
			r.name AS room_name,
			s.name AS speaker_name,
			r.is_online,
			(
			    SELECT
			      gasapp_member_number
			    FROM
			      v_customer
			    WHERE
			      room_id = r.id
			      AND company_id = r.company_id
			) AS gasapp_member_number
		FROM 
			room r 
			INNER JOIN chat_message m ON r.id = m.room_id
			LEFT OUTER JOIN speaker2 s ON m.speaker_id = s.id
		WHERE 
			m.id = :id
	</query>
</querys>